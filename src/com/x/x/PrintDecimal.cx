package com.x.x;

task PrintDecimal {
	in sync i32 d;
	in bool txReady;
	out sync u8 cout;
	
	i32 num;

	void loop() {
		
		num = d.read();

		if( num < 0 ) {
			writeChar(0x2d);
			num = (i32)(-1 * num);
		}
		
		
		u32 d = 1;
		i5 dpow = 0;
		u32 n = 0;
		
		while( num >= 10 * d) {
			d *= 10;
			dpow++;
			
			//while(!txReady.read()){}
			//cout.write(0x2e);
			//idle(1);
		}

		
		while( dpow != -1 ) {
			i32 dgt = div10multiple(num, (u4)dpow);
			fence;
			num -= dgt * d;
			fence;
			d = div10(d);
			dpow--;
			
			idle(1);
			
			if( n || dgt > 0 || d == 0 )
			{
				u8 prit = (u8) (dgt + 0x30); // 0x30 is ascii '0'
				writeChar(prit);
				n++;
			}			
		}
		
		
		writeChar(13);
		writeChar(10);

		// needed for cp2102 to recover start/stop bits..maybe
		sleep(10000);
	}
	
	void writeChar(u8 c) {
		while (!txReady.read()) {
		}
		cout.write(c);
		idle(1);
	}
	
	const void sleep(u32 cycles) {
		u32 count;
        for (count = (u32) cycles; count != 0; count--) {        }
    }
    
    const i32 div10(i32 num)
    {
    	i64 div = 0x1999999A;
		return (i32) ((div * num) >> 32);
    }
    
    const i32 div10multiple(i32 num, u4 mult)
    {
    	i64 div = 0x1999999A;
    	i32 res = num;
    	
    	i32 i;
    	
    	for(i = 0; i < mult; i++)
    	{
    		res = (i32) ((div * res) >> 32);
    	}
    	
		return res;
    }
}
